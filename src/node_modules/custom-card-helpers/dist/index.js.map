{"version":3,"file":"index.js","sources":["../src/types.ts","../src/datetime/format_date.ts","../src/datetime/use_am_pm.ts","../src/datetime/format_date_time.ts","../src/datetime/format_time.ts","../src/compute-domain.ts","../src/compute-rtl.ts","../src/compute-state-domain.ts","../src/format-number.ts","../src/const.ts","../src/fire-event.ts","../src/create-thing.ts","../src/domain_icons.ts","../src/evaluate-filter.ts","../src/haptic.ts","../src/navigate.ts","../src/turn-on-off-entity.ts","../src/toggle-entity.ts","../src/handle-action.ts","../src/sensor_icon.ts","../src/state_icon.ts","../src/binary_sensor_icon.ts","../src/cover_icon.ts","../src/input_datetime_icon.ts","../src/apply_themes_on_element.ts","../src/compute-card-size.ts","../src/compute-entity.ts","../src/compute-state-display.ts","../src/debounce.ts","../src/get-lovelace.ts","../src/handle-click.ts","../src/has-action.ts","../src/has-changed.ts","../src/has-double-click.ts","../src/datetime/relative_time.ts","../src/datetime/timer_time_remaining.ts","../src/datetime/duration_to_seconds.ts","../src/turn-on-off-entities.ts"],"sourcesContent":["import {\n  HassEntities,\n  HassConfig,\n  Auth,\n  Connection,\n  MessageBase,\n  HassServices,\n  HassServiceTarget,\n} from \"home-assistant-js-websocket\";\nimport { HapticType } from \"./haptic\";\nimport { HASSDomEvent } from \"./fire-event\";\n\nexport interface ToggleMenuActionConfig extends BaseActionConfig {\n  action: \"toggle-menu\";\n}\n\nexport interface ToggleActionConfig extends BaseActionConfig {\n  action: \"toggle\";\n}\n\nexport interface CallServiceActionConfig extends BaseActionConfig {\n  action: \"call-service\";\n  service: string;\n  service_data?: {\n    entity_id?: string | [string];\n    [key: string]: any;\n  };\n\n  target?: HassServiceTarget;\n  repeat?: number;\n  haptic?: HapticType;\n}\n\nexport interface NavigateActionConfig extends BaseActionConfig {\n  action: \"navigate\";\n  navigation_path: string;\n}\n\nexport interface UrlActionConfig extends BaseActionConfig {\n  action: \"url\";\n  url_path: string;\n}\n\nexport interface MoreInfoActionConfig extends BaseActionConfig {\n  action: \"more-info\";\n  entity?: string;\n}\n\nexport interface NoActionConfig extends BaseActionConfig {\n  action: \"none\";\n}\n\nexport interface CustomActionConfig extends BaseActionConfig {\n  action: \"fire-dom-event\";\n}\n\n/**\n * `repeat` and `haptic` are specifically for use in custom cards like the Button-Card\n */\nexport interface BaseActionConfig {\n  confirmation?: ConfirmationRestrictionConfig;\n  repeat?: number;\n  haptic?: HapticType;\n}\n\nexport interface ConfirmationRestrictionConfig {\n  text?: string;\n  exemptions?: RestrictionConfig[];\n}\n\nexport interface RestrictionConfig {\n  user: string;\n}\n\nexport type ActionConfig =\n  | ToggleActionConfig\n  | CallServiceActionConfig\n  | NavigateActionConfig\n  | UrlActionConfig\n  | MoreInfoActionConfig\n  | NoActionConfig\n  | CustomActionConfig\n  | ToggleMenuActionConfig;\n\nexport interface Window {\n  // Custom panel entry point url\n  customPanelJS: string;\n  ShadyCSS: {\n    nativeCss: boolean;\n    nativeShadow: boolean;\n    prepareTemplate(templateElement, elementName, elementExtension);\n    styleElement(element);\n    styleSubtree(element, overrideProperties);\n    styleDocument(overrideProperties);\n    getComputedStyleValue(element, propertyName);\n  };\n}\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"value-changed\": {\n      value: unknown;\n    };\n    \"config-changed\": {\n      config: any;\n    };\n    \"hass-more-info\": {\n      entityId: string | undefined;\n    };\n    \"ll-rebuild\": {};\n    \"ll-custom\": {};\n    \"location-changed\": {\n      replace: boolean;\n    };\n    \"show-dialog\": {};\n    undefined;\n    action: {\n      action: string;\n    };\n  }\n}\n\ntype ValidHassDomEvent = keyof HASSDomEvents;\n\nexport type LocalizeFunc = (key: string, ...args: any[]) => string;\n\nexport interface Credential {\n  auth_provider_type: string;\n  auth_provider_id: string;\n}\n\nexport interface MFAModule {\n  id: string;\n  name: string;\n  enabled: boolean;\n}\n\nexport interface CurrentUser {\n  id: string;\n  is_owner: boolean;\n  is_admin: boolean;\n  name: string;\n  credentials: Credential[];\n  mfa_modules: MFAModule[];\n}\n\nexport interface Theme {\n  // Incomplete\n  \"primary-color\": string;\n  \"text-primary-color\": string;\n  \"accent-color\": string;\n}\n\nexport interface Themes {\n  default_theme: string;\n  themes: { [key: string]: Theme };\n}\n\nexport interface Panel {\n  component_name: string;\n  config: { [key: string]: any } | null;\n  icon: string | null;\n  title: string | null;\n  url_path: string;\n}\n\nexport interface Panels {\n  [name: string]: Panel;\n}\n\nexport interface Resources {\n  [language: string]: { [key: string]: string };\n}\n\nexport interface Translation {\n  nativeName: string;\n  isRTL: boolean;\n  fingerprints: { [fragment: string]: string };\n}\n\nexport interface ServiceCallRequest {\n  domain: string;\n  service: string;\n  serviceData?: Record<string, any>;\n  target?: HassServiceTarget;\n}\n\nexport interface HomeAssistant {\n  auth: Auth;\n  connection: Connection;\n  connected: boolean;\n  states: HassEntities;\n  services: HassServices;\n  config: HassConfig;\n  themes: Themes;\n  selectedTheme?: string | null;\n  panels: Panels;\n  panelUrl: string;\n\n  // i18n\n  // current effective language, in that order:\n  //   - backend saved user selected lanugage\n  //   - language in local appstorage\n  //   - browser language\n  //   - english (en)\n  language: string;\n  locale: FrontendLocaleData;\n  // local stored language, keep that name for backward compability\n  selectedLanguage: string | null;\n  resources: Resources;\n  localize: LocalizeFunc;\n  translationMetadata: {\n    fragments: string[];\n    translations: {\n      [lang: string]: Translation;\n    };\n  };\n\n  dockedSidebar: boolean;\n  moreInfoEntityId: string;\n  user: CurrentUser;\n  callService: (\n    domain: ServiceCallRequest[\"domain\"],\n    service: ServiceCallRequest[\"service\"],\n    serviceData?: ServiceCallRequest[\"serviceData\"],\n    target?: ServiceCallRequest[\"target\"]\n  ) => Promise<void>;\n  callApi: <T>(\n    method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\",\n    path: string,\n    parameters?: { [key: string]: any }\n  ) => Promise<T>;\n  fetchWithAuth: (\n    path: string,\n    init?: { [key: string]: any }\n  ) => Promise<Response>;\n  sendWS: (msg: MessageBase) => Promise<void>;\n  callWS: <T>(msg: MessageBase) => Promise<T>;\n}\n\nexport enum NumberFormat {\n  language = \"language\",\n  system = \"system\",\n  comma_decimal = \"comma_decimal\",\n  decimal_comma = \"decimal_comma\",\n  space_comma = \"space_comma\",\n  none = \"none\",\n}\n\nexport enum TimeFormat {\n  language = \"language\",\n  system = \"system\",\n  am_pm = \"12\",\n  twenty_four = \"24\",\n}\n\nexport interface FrontendLocaleData {\n  language: string;\n  number_format: NumberFormat;\n  time_format: TimeFormat;\n}\n\nexport interface LovelaceCardConfig {\n  index?: number;\n  view_index?: number;\n  type: string;\n  [key: string]: any;\n}\n\nexport interface LovelaceCard extends HTMLElement {\n  hass?: HomeAssistant;\n  isPanel?: boolean;\n  editMode?: boolean;\n  getCardSize(): number | Promise<number>;\n  setConfig(config: LovelaceCardConfig): void;\n}\n\nexport interface LovelaceCardEditor extends HTMLElement {\n  hass?: HomeAssistant;\n  lovelace?: LovelaceConfig;\n  setConfig(config: LovelaceCardConfig): void;\n}\n\nexport interface LovelaceConfig {\n  title?: string;\n  views: LovelaceViewConfig[];\n  background?: string;\n}\n\nexport interface LovelaceViewConfig {\n  index?: number;\n  title?: string;\n  badges?: Array<string | LovelaceBadgeConfig>;\n  cards?: LovelaceCardConfig[];\n  path?: string;\n  icon?: string;\n  theme?: string;\n  panel?: boolean;\n  background?: string;\n  visible?: boolean | ShowViewConfig[];\n}\n\nexport interface ShowViewConfig {\n  user?: string;\n}\n\nexport interface LovelaceBadgeConfig {\n  type?: string;\n  [key: string]: any;\n}\n\nexport interface ActionHandlerDetail {\n  action: string;\n}\n\nexport type ActionHandlerEvent = HASSDomEvent<ActionHandlerDetail>;\n\nexport interface ActionHandlerOptions {\n  hasHold?: boolean;\n  hasDoubleClick?: boolean;\n}\n\nexport interface EntitiesCardEntityConfig extends EntityConfig {\n  type?: string;\n  secondary_info?:\n    | \"entity-id\"\n    | \"last-changed\"\n    | \"last-triggered\"\n    | \"last-updated\"\n    | \"position\"\n    | \"tilt-position\"\n    | \"brightness\";\n  action_name?: string;\n  service?: string;\n  service_data?: Record<string, unknown>;\n  url?: string;\n  tap_action?: ActionConfig;\n  hold_action?: ActionConfig;\n  double_tap_action?: ActionConfig;\n  state_color?: boolean;\n  show_name?: boolean;\n  show_icon?: boolean;\n}\n\nexport interface EntityConfig {\n  entity: string;\n  type?: string;\n  name?: string;\n  icon?: string;\n  image?: string;\n}\n\nexport interface LovelaceElementConfigBase {\n  type: string;\n  style: Record<string, string>;\n}\n","//REF: https://github.com/home-assistant/frontend/blob/dev/src/common/datetime/format_date.ts\n\nimport { FrontendLocaleData } from \"../types\";\n\n/**\n * Formatting a Date to the dddd, mmmm yy format e.g. Tuesday, August 10\n * @param dateObj The date to convert\n * @param locale The users's locale settings\n * @returns date string like \"Tuesday, August 10\"\n */\nexport const formatDateWeekday = (dateObj: Date, locale: FrontendLocaleData) =>\n  formatDateWeekdayMem(locale).format(dateObj);\n\nconst formatDateWeekdayMem =\n  (locale: FrontendLocaleData) =>\n  new Intl.DateTimeFormat(locale.language, {\n    weekday: \"long\",\n    month: \"long\",\n    day: \"numeric\",\n  });\n\n/**\n * Formatting a Date to the mmmm dd, yyyy format e.g. August 10, 2021\n * @param dateObj The date to convert\n * @param locale The users's locale settings\n * @returns date string like \"August 10, 2021\"\n */\nexport const formatDate = (dateObj: Date, locale: FrontendLocaleData) =>\n  formatDateMem(locale).format(dateObj);\n\nconst formatDateMem =\n  (locale: FrontendLocaleData) =>\n  new Intl.DateTimeFormat(locale.language, {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  });\n\n/**\n * Formatting a Date to the classic date format e.g. 10/08/2021\n * @param dateObj The date to convert\n * @param locale The users's locale settings\n * @returns classic date format \"10/08/2021\"\n */\nexport const formatDateNumeric = (dateObj: Date, locale: FrontendLocaleData) =>\n  formatDateNumericMem(locale).format(dateObj);\n\nconst formatDateNumericMem =\n  (locale: FrontendLocaleData) =>\n    new Intl.DateTimeFormat(locale.language, {\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"numeric\",\n    });\n\n\n/**\n * Formatting a Date to just a month with days e.g. Aug 10\n * @param dateObj The date to convert\n * @param locale The users's locale settings\n * @returns month and day like \"Aug 10\"\n */\nexport const formatDateShort = (dateObj: Date, locale: FrontendLocaleData) =>\nformatDateShortMem(locale).format(dateObj);\n\nconst formatDateShortMem =\n(locale: FrontendLocaleData) =>\n  new Intl.DateTimeFormat(locale.language, {\n    day: \"numeric\",\n    month: \"short\",\n  });\n\n\n/**\n * Formatting a Date to just a month with year e.g. August 2021\n * @param dateObj The date to convert\n * @param locale The users's locale settings\n * @returns month and year like \"August 2021\"\n */\nexport const formatDateMonthYear = (\ndateObj: Date,\nlocale: FrontendLocaleData\n) => formatDateMonthYearMem(locale).format(dateObj);\n\nconst formatDateMonthYearMem = (locale: FrontendLocaleData) =>\n  new Intl.DateTimeFormat(locale.language, {\n    month: \"long\",\n    year: \"numeric\",\n  });\n\n\n/**\n * Formatting a Date to just a month e.g. August\n * @param dateObj The date to convert\n * @param locale The users's locale settings\n * @returns the written out months of the date\n */\nexport const formatDateMonth = (dateObj: Date, locale: FrontendLocaleData) =>\nformatDateMonthMem(locale).format(dateObj);\n\nconst formatDateMonthMem = (locale: FrontendLocaleData) =>\n  new Intl.DateTimeFormat(locale.language, {\n    month: \"long\",\n  });\n\n\n/**\n * Formatting a Date to just a year e.g. 2021\n * @param dateObj The date to convert\n * @param locale The users's locale settings\n * @returns the year of the date in yyyy\n */\nexport const formatDateYear = (dateObj: Date, locale: FrontendLocaleData) =>\nformatDateYearMem(locale).format(dateObj);\n\nconst formatDateYearMem = (locale: FrontendLocaleData) =>\n  new Intl.DateTimeFormat(locale.language, {\n    year: \"numeric\",\n  });\n","// REF: https://github.com/home-assistant/frontend/blob/dev/src/common/datetime/use_am_pm.ts\r\n\r\nimport { FrontendLocaleData, TimeFormat } from \"../types\"\r\n\r\n/**\r\n * Checking if AM/PM time format is used within the browser.\r\n * @param locale Homeassistant frontend locale data\r\n * @returns \r\n */\r\nexport const useAmPm = (locale: FrontendLocaleData): boolean => {\r\n  if (\r\n    locale.time_format === TimeFormat.language ||\r\n    locale.time_format === TimeFormat.system\r\n  ) {\r\n    const testLanguage =\r\n      locale.time_format === TimeFormat.language ? locale.language : undefined;\r\n    const test = new Date().toLocaleString(testLanguage);\r\n    return test.includes(\"AM\") || test.includes(\"PM\");\r\n  }\r\n\r\n  return locale.time_format === TimeFormat.am_pm;\r\n};\r\n","//REF: https://github.com/home-assistant/frontend/blob/dev/src/common/datetime/format_date_time.ts\n\nimport { FrontendLocaleData } from \"../types\";\nimport { useAmPm } from \"./use_am_pm\";\n\n// August 9, 2021, 8:23 AM\n/**\n * Formatting a dateObject to date with time e.g. August 9, 2021, 8:23 AM\n * @param dateObj The date to convert\n * @param locale The users's locale settings\n * @returns month and day like \"August 9, 2021, 8:23 AM\"\n */\nexport const formatDateTime = (dateObj: Date, locale: FrontendLocaleData) =>\n  formatDateTimeMem(locale).format(dateObj);\n\nconst formatDateTimeMem = (locale: FrontendLocaleData) =>\n  new Intl.DateTimeFormat(locale.language, {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n    hour: useAmPm(locale) ? \"numeric\" : \"2-digit\",\n    minute: \"2-digit\",\n    hour12: useAmPm(locale),\n  });\n\n\n/**\n * Formatting a dateObject to date with time e.g. August 9, 2021, 8:23:15 AM\n * @param dateObj The date to convert\n * @param locale The users's locale settings\n * @returns month and day like \"August 9, 2021, 8:23:15 AM\"\n */\nexport const formatDateTimeWithSeconds = (\n  dateObj: Date,\n  locale: FrontendLocaleData\n) => formatDateTimeWithSecondsMem(locale).format(dateObj);\n\nconst formatDateTimeWithSecondsMem =\n  (locale: FrontendLocaleData) =>\n    new Intl.DateTimeFormat(locale.language, {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      hour: useAmPm(locale) ? \"numeric\" : \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      hour12: useAmPm(locale),\n    });\n\n/**\n * Formatting a Date to just date with AM/PM time e.g. 9/8/2021, 8:23 AM\n * @param dateObj The date to convert\n * @param locale The users's locale settings\n * @returns month and day like \"9/8/2021, 8:23 AM\"\n */\nexport const formatDateTimeNumeric = (\n  dateObj: Date,\n  locale: FrontendLocaleData\n) => formatDateTimeNumericMem(locale).format(dateObj);\n\nconst formatDateTimeNumericMem =\n  (locale: FrontendLocaleData) =>\n    new Intl.DateTimeFormat(locale.language, {\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"2-digit\",\n      hour12: useAmPm(locale),\n    });","//REF: https://github.com/home-assistant/frontend/blob/dev/src/common/datetime/format_time.ts\n\nimport { FrontendLocaleData } from \"../types\";\nimport { useAmPm } from \"./use_am_pm\";\n\n/**\n * 9:15 PM or 21:15\n * @param dateObj The time to convert\n * @param locale  The users's locale settings\n * @returns Reformated time in hh:mm\n */\n export const formatTime = (dateObj: Date, locale: FrontendLocaleData) =>\n formatTimeMem(locale).format(dateObj);\n\n const formatTimeMem =\n (locale: FrontendLocaleData) =>\n   new Intl.DateTimeFormat(locale.language, {\n     hour: \"numeric\",\n     minute: \"2-digit\",\n     hour12: useAmPm(locale),\n   });\n\n/**\n* 9:15:24 PM or 21:15:24\n* @param dateObj The time to convert\n* @param locale The users's locale settings\n* @returns Reformated time in hh:mm:ss\n*/\nexport const formatTimeWithSeconds = (\n dateObj: Date,\n locale: FrontendLocaleData\n) => formatTimeWithSecondsMem(locale).format(dateObj);\n\nconst formatTimeWithSecondsMem =\n (locale: FrontendLocaleData) =>\n   new Intl.DateTimeFormat(locale.language, {\n     hour: useAmPm(locale) ? \"numeric\" : \"2-digit\",\n     minute: \"2-digit\",\n     second: \"2-digit\",\n     hour12: useAmPm(locale),\n   });\n\n/**\n* Tuesday 7:00 PM or Tuesday 19:00\n* @param dateObj The datetime to convert\n* @param locale The users's locale settings\n* @returns Reformated weekday/time in dddd hh:mm\n*/\nexport const formatTimeWeekday = (dateObj: Date, locale: FrontendLocaleData) =>\n formatTimeWeekdayMem(locale).format(dateObj);\n\nconst formatTimeWeekdayMem =\n (locale: FrontendLocaleData) =>\n   new Intl.DateTimeFormat(locale.language, {\n     hour: useAmPm(locale) ? \"numeric\" : \"2-digit\",\n     minute: \"2-digit\",\n     second: \"2-digit\",\n     hour12: useAmPm(locale),\n   }); \n","export function computeDomain(entityId: string): string {\n  return entityId.substr(0, entityId.indexOf(\".\"));\n}\n","import { HomeAssistant } from \"./types\";\n\nexport function computeRTL(hass: HomeAssistant) {\n  const lang = hass?.locale?.language || \"en\";\n  if (hass.translationMetadata.translations[lang]) {\n    return hass.translationMetadata.translations[lang].isRTL || false;\n  }\n  return false;\n}\n\nexport function computeRTLDirection(hass: HomeAssistant) {\n  return computeRTL(hass) ? \"rtl\" : \"ltr\";\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { computeDomain } from \"./compute-domain\";\n\nexport function computeStateDomain(stateObj: HassEntity) {\n  return computeDomain(stateObj.entity_id);\n}\n","//REF: https://github.com/home-assistant/frontend/blob/dev/src/common/number/format_number.ts\n\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { FrontendLocaleData, NumberFormat } from \"./types\";\n\n/**\n * Returns true if the entity is considered numeric based on the attributes it has\n * @param stateObj The entity state object\n */\n export const isNumericState = (stateObj: HassEntity): boolean =>\n !!stateObj.attributes.unit_of_measurement ||\n !!stateObj.attributes.state_class;\n\nexport const numberFormatToLocale = (\n localeOptions: FrontendLocaleData\n): string | string[] | undefined => {\n switch (localeOptions.number_format) {\n   case NumberFormat.comma_decimal:\n     return [\"en-US\", \"en\"]; // Use United States with fallback to English formatting 1,234,567.89\n   case NumberFormat.decimal_comma:\n     return [\"de\", \"es\", \"it\"]; // Use German with fallback to Spanish then Italian formatting 1.234.567,89\n   case NumberFormat.space_comma:\n     return [\"fr\", \"sv\", \"cs\"]; // Use French with fallback to Swedish and Czech formatting 1 234 567,89\n   case NumberFormat.system:\n     return undefined;\n   default:\n     return localeOptions.language;\n }\n};\n\nexport const round = (value: number, precision = 2): number =>\n  Math.round(value * 10 ** precision) / 10 ** precision;\n\n/**\n * Formats a number based on the specified language with thousands separator(s) and decimal character for better legibility.\n * @param num The number to format\n * @param locale The user-selected language and number format, from `hass.locale`\n * @param options Intl.NumberFormatOptions to use\n */\nexport const formatNumber = (\n  num: string | number,\n  localeOptions?: FrontendLocaleData,\n  options?: Intl.NumberFormatOptions\n): string => {\n  const locale = localeOptions\n    ? numberFormatToLocale(localeOptions)\n    : undefined;\n\n  // Polyfill for Number.isNaN, which is more reliable than the global isNaN()\n  Number.isNaN =\n    Number.isNaN ||\n    function isNaN(input) {\n      return typeof input === \"number\" && isNaN(input);\n    };\n\n  if (\n    localeOptions?.number_format !== NumberFormat.none &&\n    !Number.isNaN(Number(num)) &&\n    Intl\n  ) {\n    try {\n      return new Intl.NumberFormat(\n        locale,\n        getDefaultFormatOptions(num, options)\n      ).format(Number(num));\n    } catch (err: any) {\n      // Don't fail when using \"TEST\" language\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return new Intl.NumberFormat(\n        undefined,\n        getDefaultFormatOptions(num, options)\n      ).format(Number(num));\n    }\n  }\n  if (typeof num === \"string\") {\n    return num;\n  }\n  return `${round(num, options?.maximumFractionDigits).toString()}${\n    options?.style === \"currency\" ? ` ${options.currency}` : \"\"\n  }`;\n};\n\n/**\n * Generates default options for Intl.NumberFormat\n * @param num The number to be formatted\n * @param options The Intl.NumberFormatOptions that should be included in the returned options\n */\nconst getDefaultFormatOptions = (\n  num: string | number,\n  options?: Intl.NumberFormatOptions\n): Intl.NumberFormatOptions => {\n  const defaultOptions: Intl.NumberFormatOptions = {\n    maximumFractionDigits: 2,\n    ...options,\n  };\n\n  if (typeof num !== \"string\") {\n    return defaultOptions;\n  }\n\n  // Keep decimal trailing zeros if they are present in a string numeric value\n  if (\n    !options ||\n    (!options.minimumFractionDigits && !options.maximumFractionDigits)\n  ) {\n    const digits = num.indexOf(\".\") > -1 ? num.split(\".\")[1].length : 0;\n    defaultOptions.minimumFractionDigits = digits;\n    defaultOptions.maximumFractionDigits = digits;\n  }\n\n  return defaultOptions;\n};\n","/** Constants to be used in the frontend. */\n\n// Constants should be alphabetically sorted by name.\n// Arrays with values should be alphabetically sorted if order doesn't matter.\n// Each constant should have a description what it is supposed to be used for.\n\n/** Icon to use when no icon specified for domain. */\nexport const DEFAULT_DOMAIN_ICON = \"mdi:bookmark\";\n\n/** Panel to show when no panel is picked. */\nexport const DEFAULT_PANEL = \"lovelace\";\n\n/** Domains that have a state card. */\nexport const DOMAINS_WITH_CARD = [\n  \"climate\",\n  \"cover\",\n  \"configurator\",\n  \"input_select\",\n  \"input_number\",\n  \"input_text\",\n  \"lock\",\n  \"media_player\",\n  \"scene\",\n  \"script\",\n  \"timer\",\n  \"vacuum\",\n  \"water_heater\",\n  \"weblink\"\n];\n\n/** Domains with separate more info dialog. */\nexport const DOMAINS_WITH_MORE_INFO = [\n  \"alarm_control_panel\",\n  \"automation\",\n  \"camera\",\n  \"climate\",\n  \"configurator\",\n  \"cover\",\n  \"fan\",\n  \"group\",\n  \"history_graph\",\n  \"input_datetime\",\n  \"light\",\n  \"lock\",\n  \"media_player\",\n  \"script\",\n  \"sun\",\n  \"updater\",\n  \"vacuum\",\n  \"water_heater\",\n  \"weather\"\n];\n\n/** Domains that show no more info dialog. */\nexport const DOMAINS_HIDE_MORE_INFO = [\n  \"input_number\",\n  \"input_select\",\n  \"input_text\",\n  \"scene\",\n  \"weblink\"\n];\n\n/** Domains that should have the history hidden in the more info dialog. */\nexport const DOMAINS_MORE_INFO_NO_HISTORY = [\n  \"camera\",\n  \"configurator\",\n  \"history_graph\",\n  \"scene\"\n];\n\n/** States that we consider \"off\". */\nexport const STATES_OFF = [\"closed\", \"locked\", \"off\"];\n\n/** Domains where we allow toggle in Lovelace. */\nexport const DOMAINS_TOGGLE = new Set([\n  \"fan\",\n  \"input_boolean\",\n  \"light\",\n  \"switch\",\n  \"group\",\n  \"automation\"\n]);\n\n/** Temperature units. */\nexport const UNIT_C = \"°C\";\nexport const UNIT_F = \"°F\";\n\n/** Entity ID of the default view. */\nexport const DEFAULT_VIEW_ENTITY_ID = \"group.default_view\";\n","// Polymer legacy event helpers used courtesy of the Polymer project.\n//\n// Copyright (c) 2017 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//    * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//    * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\ndeclare global {\n  // tslint:disable-next-line\n  interface HASSDomEvents {}\n}\n\nexport type ValidHassDomEvent = keyof HASSDomEvents;\n\nexport interface HASSDomEvent<T> extends Event {\n  detail: T;\n}\n\n/**\n * Dispatches a custom event with an optional detail value.\n *\n * @param {string} type Name of event type.\n * @param {*=} detail Detail value containing event-specific\n *   payload.\n * @param {{ bubbles: (boolean|undefined),\n *           cancelable: (boolean|undefined),\n *           composed: (boolean|undefined) }=}\n *  options Object specifying options.  These may include:\n *  `bubbles` (boolean, defaults to `true`),\n *  `cancelable` (boolean, defaults to false), and\n *  `node` on which to fire the event (HTMLElement, defaults to `this`).\n * @return {Event} The new event that was fired.\n */\nexport const fireEvent = <HassEvent extends ValidHassDomEvent>(\n  node: HTMLElement | Window,\n  type: HassEvent,\n  detail?: HASSDomEvents[HassEvent],\n  options?: {\n    bubbles?: boolean;\n    cancelable?: boolean;\n    composed?: boolean;\n  }\n) => {\n  options = options || {};\n  // @ts-ignore\n  detail = detail === null || detail === undefined ? {} : detail;\n  const event = new Event(type, {\n    bubbles: options.bubbles === undefined ? true : options.bubbles,\n    cancelable: Boolean(options.cancelable),\n    composed: options.composed === undefined ? true : options.composed\n  });\n  (event as any).detail = detail;\n  node.dispatchEvent(event);\n  return event;\n};\n","import { fireEvent } from \"./fire-event\";\n\nconst SPECIAL_TYPES = new Set([\n  \"call-service\",\n  \"divider\",\n  \"section\",\n  \"weblink\",\n  \"cast\",\n  \"select\"\n]);\nconst DOMAIN_TO_ELEMENT_TYPE = {\n  alert: \"toggle\",\n  automation: \"toggle\",\n  climate: \"climate\",\n  cover: \"cover\",\n  fan: \"toggle\",\n  group: \"group\",\n  input_boolean: \"toggle\",\n  input_number: \"input-number\",\n  input_select: \"input-select\",\n  input_text: \"input-text\",\n  light: \"toggle\",\n  lock: \"lock\",\n  media_player: \"media-player\",\n  remote: \"toggle\",\n  scene: \"scene\",\n  script: \"script\",\n  sensor: \"sensor\",\n  timer: \"timer\",\n  switch: \"toggle\",\n  vacuum: \"toggle\",\n  // Temporary. Once climate is rewritten,\n  // water heater should get it's own row.\n  water_heater: \"climate\",\n  input_datetime: \"input-datetime\"\n};\n\nexport const createThing = (cardConfig, isRow = false) => {\n  const _createError = (error, config) => {\n    return _createThing(\n      \"hui-error-card\",\n      {\n        type: \"error\",\n        error,\n        config\n      }\n    );\n  };\n\n  const _createThing = (tag, config) => {\n    const element = window.document.createElement(tag);\n    try {\n      // Preventing an error-card infinity loop: https://github.com/custom-cards/custom-card-helpers/issues/54\n      if (!element.setConfig) return;\n      element.setConfig(config);\n    } catch (err) {\n      console.error(tag, err);\n      return _createError((err as Error).message, config);\n    }\n    return element;\n  };\n\n  if (!cardConfig || typeof cardConfig !== \"object\" || (!isRow && !cardConfig.type))\n    return _createError(\"No type defined\", cardConfig);\n  let tag = cardConfig.type;\n  if (tag && tag.startsWith(\"custom:\")) {\n    tag = tag.substr(\"custom:\".length);\n  } else if (isRow) {\n    if (SPECIAL_TYPES.has(tag)) {\n      tag = `hui-${tag}-row`;\n    } else {\n      if (!cardConfig.entity) {\n        return _createError(\"Invalid config given.\", cardConfig);\n      }\n    \n      const domain = cardConfig.entity.split(\".\", 1)[0];\n      tag = `hui-${DOMAIN_TO_ELEMENT_TYPE[domain] || \"text\"}-entity-row`;\n    }\n  } else {\n    tag = `hui-${tag}-card`;\n  }\n\n  if (customElements.get(tag)) return _createThing(tag, cardConfig);\n\n  // If element doesn't exist (yet) create an error\n  const element = _createError(\n    `Custom element doesn't exist: ${cardConfig.type}.`,\n    cardConfig\n  );\n  element.style.display = \"None\";\n  const timer = setTimeout(() => {\n    element.style.display = \"\";\n  }, 2000);\n  // Remove error if element is defined later\n  customElements.whenDefined(cardConfig.type).then(() => {\n    clearTimeout(timer);\n    fireEvent(element, \"ll-rebuild\", {}, element);\n  });\n\n  return element;\n};\n","/**\n * Return the icon to be used for a domain.\n *\n * Optionally pass in a state to influence the domain icon.\n */\nimport { DEFAULT_DOMAIN_ICON } from \"./const\";\n\nexport const fixedIcons = {\n  alert: \"mdi:alert\",\n  automation: \"mdi:playlist-play\",\n  calendar: \"mdi:calendar\",\n  camera: \"mdi:video\",\n  climate: \"mdi:thermostat\",\n  configurator: \"mdi:settings\",\n  conversation: \"mdi:text-to-speech\",\n  device_tracker: \"mdi:account\",\n  fan: \"mdi:fan\",\n  group: \"mdi:google-circles-communities\",\n  history_graph: \"mdi:chart-line\",\n  homeassistant: \"mdi:home-assistant\",\n  homekit: \"mdi:home-automation\",\n  image_processing: \"mdi:image-filter-frames\",\n  input_boolean: \"mdi:drawing\",\n  input_datetime: \"mdi:calendar-clock\",\n  input_number: \"mdi:ray-vertex\",\n  input_select: \"mdi:format-list-bulleted\",\n  input_text: \"mdi:textbox\",\n  light: \"mdi:lightbulb\",\n  mailbox: \"mdi:mailbox\",\n  notify: \"mdi:comment-alert\",\n  person: \"mdi:account\",\n  plant: \"mdi:flower\",\n  proximity: \"mdi:apple-safari\",\n  remote: \"mdi:remote\",\n  scene: \"mdi:google-pages\",\n  script: \"mdi:file-document\",\n  sensor: \"mdi:eye\",\n  simple_alarm: \"mdi:bell\",\n  sun: \"mdi:white-balance-sunny\",\n  switch: \"mdi:flash\",\n  timer: \"mdi:timer\",\n  updater: \"mdi:cloud-upload\",\n  vacuum: \"mdi:robot-vacuum\",\n  water_heater: \"mdi:thermometer\",\n  weblink: \"mdi:open-in-new\"\n};\n\nexport function domainIcon(domain: string, state?: string): string {\n  if (domain in fixedIcons) {\n    return fixedIcons[domain];\n  }\n\n  switch (domain) {\n    case \"alarm_control_panel\":\n      switch (state) {\n        case \"armed_home\":\n          return \"mdi:bell-plus\";\n        case \"armed_night\":\n          return \"mdi:bell-sleep\";\n        case \"disarmed\":\n          return \"mdi:bell-outline\";\n        case \"triggered\":\n          return \"mdi:bell-ring\";\n        default:\n          return \"mdi:bell\";\n      }\n\n    case \"binary_sensor\":\n      return state && state === \"off\"\n        ? \"mdi:radiobox-blank\"\n        : \"mdi:checkbox-marked-circle\";\n\n    case \"cover\":\n      return state === \"closed\" ? \"mdi:window-closed\" : \"mdi:window-open\";\n\n    case \"lock\":\n      return state && state === \"unlocked\" ? \"mdi:lock-open\" : \"mdi:lock\";\n\n    case \"media_player\":\n      return state && state !== \"off\" && state !== \"idle\"\n        ? \"mdi:cast-connected\"\n        : \"mdi:cast\";\n\n    case \"zwave\":\n      switch (state) {\n        case \"dead\":\n          return \"mdi:emoticon-dead\";\n        case \"sleeping\":\n          return \"mdi:sleep\";\n        case \"initializing\":\n          return \"mdi:timer-sand\";\n        default:\n          return \"mdi:z-wave\";\n      }\n\n    default:\n      // tslint:disable-next-line\n      console.warn(\n        \"Unable to find icon for domain \" + domain + \" (\" + state + \")\"\n      );\n      return DEFAULT_DOMAIN_ICON;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\n\nexport const evaluateFilter = (stateObj: HassEntity, filter: any): boolean => {\n  const operator = filter.operator || \"==\";\n  const value = filter.value || filter;\n  const state = filter.attribute\n    ? stateObj.attributes[filter.attribute]\n    : stateObj.state;\n\n  switch (operator) {\n    case \"==\":\n      return state === value;\n    case \"<=\":\n      return state <= value;\n    case \"<\":\n      return state < value;\n    case \">=\":\n      return state >= value;\n    case \">\":\n      return state > value;\n    case \"!=\":\n      return state !== value;\n    case \"regex\": {\n      return state.match(value);\n    }\n    default:\n      return false;\n  }\n};\n","import { HASSDomEvent, fireEvent } from \"./fire-event\";\n\n/**\n * Broadcast haptic feedback requests\n */\n\n\n// Allowed types are from iOS HIG.\n// https://developer.apple.com/design/human-interface-guidelines/ios/user-interaction/feedback/#haptics\n// Implementors on platforms other than iOS should attempt to match the patterns (shown in HIG) as closely as possible.\nexport type HapticType =\n  | \"success\"\n  | \"warning\"\n  | \"failure\"\n  | \"light\"\n  | \"medium\"\n  | \"heavy\"\n  | \"selection\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    haptic: HapticType;\n  }\n\n  interface GlobalEventHandlersEventMap {\n    haptic: HASSDomEvent<HapticType>;\n  }\n}\n\nexport const forwardHaptic = (hapticType: HapticType) => {\n  fireEvent(window, \"haptic\", hapticType);\n};\n","import { fireEvent } from \"./fire-event\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"location-changed\": {\n      replace: boolean;\n    };\n  }\n}\n\nexport const navigate = (\n  _node: any,\n  path: string,\n  replace: boolean = false\n) => {\n  if (replace) {\n    history.replaceState(null, \"\", path);\n  } else {\n    history.pushState(null, \"\", path);\n  }\n  fireEvent(window, \"location-changed\", {\n    replace\n  });\n};\n","import { HomeAssistant } from \"./types\";\nimport { computeDomain } from \"./compute-domain\";\n\nexport const turnOnOffEntity = (\n  hass: HomeAssistant,\n  entityId: string,\n  turnOn = true\n): Promise<void> => {\n  const stateDomain = computeDomain(entityId);\n  const serviceDomain = stateDomain === \"group\" ? \"homeassistant\" : stateDomain;\n\n  let service;\n  switch (stateDomain) {\n    case \"lock\":\n      service = turnOn ? \"unlock\" : \"lock\";\n      break;\n    case \"cover\":\n      service = turnOn ? \"open_cover\" : \"close_cover\";\n      break;\n    default:\n      service = turnOn ? \"turn_on\" : \"turn_off\";\n  }\n\n  return hass.callService(serviceDomain, service, { entity_id: entityId });\n};\n","import { STATES_OFF } from \"./const\";\nimport { turnOnOffEntity } from \"./turn-on-off-entity\";\nimport { HomeAssistant } from \"./types\";\n\nexport const toggleEntity = (\n  hass: HomeAssistant,\n  entityId: string\n): Promise<void> => {\n  const turnOn = STATES_OFF.includes(hass.states[entityId].state);\n  return turnOnOffEntity(hass, entityId, turnOn);\n};\n","import { HomeAssistant, ActionConfig } from \"./types\";\nimport { forwardHaptic } from \"./haptic\";\nimport { fireEvent } from \"./fire-event\";\nimport { navigate } from \"./navigate\";\nimport { toggleEntity } from \"./toggle-entity\";\n\nexport const handleActionConfig = (\n  node: HTMLElement,\n  hass: HomeAssistant,\n  config: {\n    entity?: string;\n    camera_image?: string;\n    hold_action?: ActionConfig;\n    tap_action?: ActionConfig;\n    double_tap_action?: ActionConfig;\n  },\n  actionConfig: ActionConfig | undefined\n): void => {\n  if (!actionConfig) {\n    actionConfig = {\n      action: \"more-info\",\n    };\n  }\n\n  if (\n    actionConfig.confirmation &&\n    (!actionConfig.confirmation.exemptions ||\n      !actionConfig.confirmation.exemptions.some(\n        (e) => e.user === hass!.user!.id\n      ))\n  ) {\n    forwardHaptic(\"warning\");\n\n    if (\n      !confirm(\n        actionConfig.confirmation.text ||\n          `Are you sure you want to ${actionConfig.action}?`\n      )\n    ) {\n      return;\n    }\n  }\n\n  switch (actionConfig.action) {\n    case \"more-info\":\n      if (config.entity || config.camera_image) {\n        fireEvent(node, \"hass-more-info\", {\n          entityId: config.entity ? config.entity : config.camera_image!,\n        });\n      }\n      break;\n    case \"navigate\":\n      if (actionConfig.navigation_path) {\n        navigate(node, actionConfig.navigation_path);\n      }\n      break;\n    case \"url\":\n      if (actionConfig.url_path) {\n        window.open(actionConfig.url_path);\n      }\n      break;\n    case \"toggle\":\n      if (config.entity) {\n        toggleEntity(hass, config.entity!);\n        forwardHaptic(\"success\");\n      }\n      break;\n    case \"call-service\": {\n      if (!actionConfig.service) {\n        forwardHaptic(\"failure\");\n        return;\n      }\n      const [domain, service] = actionConfig.service.split(\".\", 2);\n      hass.callService(domain, service, actionConfig.service_data, actionConfig.target);\n      forwardHaptic(\"success\");\n      break;\n    }\n    case \"fire-dom-event\": {\n      fireEvent(node, \"ll-custom\", actionConfig);\n    }\n  }\n};\n\nexport const handleAction = (\n  node: HTMLElement,\n  hass: HomeAssistant,\n  config: {\n    entity?: string;\n    camera_image?: string;\n    hold_action?: ActionConfig;\n    tap_action?: ActionConfig;\n    double_tap_action?: ActionConfig;\n  },\n  action: string\n): void => {\n  let actionConfig: ActionConfig | undefined;\n\n  if (action === \"double_tap\" && config.double_tap_action) {\n    actionConfig = config.double_tap_action;\n  } else if (action === \"hold\" && config.hold_action) {\n    actionConfig = config.hold_action;\n  } else if (action === \"tap\" && config.tap_action) {\n    actionConfig = config.tap_action;\n  }\n\n  handleActionConfig(node, hass, config, actionConfig);\n};\n","/** Return an icon representing a sensor state. */\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { UNIT_C, UNIT_F } from \"./const\";\nimport { domainIcon } from \"./domain_icons\";\n\nconst fixedDeviceClassIcons = {\n  humidity: \"mdi:water-percent\",\n  illuminance: \"mdi:brightness-5\",\n  temperature: \"mdi:thermometer\",\n  pressure: \"mdi:gauge\",\n  power: \"mdi:flash\",\n  signal_strength: \"mdi:wifi\",\n};\n\nexport const sensorIcon = (state: HassEntity) => {\n  const dclass = state.attributes.device_class;\n\n  if (dclass && dclass in fixedDeviceClassIcons) {\n    return fixedDeviceClassIcons[dclass];\n  }\n  if (dclass === \"battery\") {\n    const battery = Number(state.state);\n    if (isNaN(battery)) {\n      return \"mdi:battery-unknown\";\n    }\n    const batteryRound = Math.round(battery / 10) * 10;\n    if (batteryRound >= 100) {\n      return \"mdi:battery\";\n    }\n    if (batteryRound <= 0) {\n      return \"mdi:battery-alert\";\n    }\n    // Will return one of the following icons: (listed so extractor picks up)\n    // mdi:battery-10\n    // mdi:battery-20\n    // mdi:battery-30\n    // mdi:battery-40\n    // mdi:battery-50\n    // mdi:battery-60\n    // mdi:battery-70\n    // mdi:battery-80\n    // mdi:battery-90\n    // We obscure 'hass' in iconname so this name does not get picked up\n    return `${\"hass\"}:battery-${batteryRound}`;\n  }\n\n  const unit = state.attributes.unit_of_measurement;\n  if (unit === UNIT_C || unit === UNIT_F) {\n    return \"mdi:thermometer\";\n  }\n  return domainIcon(\"sensor\");\n};\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { computeDomain } from \"./compute-domain\";\nimport { DEFAULT_DOMAIN_ICON } from \"./const\";\nimport { binarySensorIcon } from \"./binary_sensor_icon\";\nimport { coverIcon } from \"./cover_icon\";\nimport { sensorIcon } from \"./sensor_icon\";\nimport { inputDateTimeIcon } from \"./input_datetime_icon\";\nimport { domainIcon } from \"./domain_icons\";\n\nconst domainIcons = {\n  binary_sensor: binarySensorIcon,\n  cover: coverIcon,\n  sensor: sensorIcon,\n  input_datetime: inputDateTimeIcon,\n};\n\nexport const stateIcon = (state: HassEntity) => {\n  if (!state) {\n    return DEFAULT_DOMAIN_ICON;\n  }\n  if (state.attributes.icon) {\n    return state.attributes.icon;\n  }\n\n  const domain = computeDomain(state.entity_id);\n\n  if (domain in domainIcons) {\n    return domainIcons[domain](state);\n  }\n  return domainIcon(domain, state.state);\n};\n","import { HassEntity } from \"home-assistant-js-websocket\";\n\n/** Return an icon representing a binary sensor state. */\n\nexport const binarySensorIcon = (state?: string, stateObj?: HassEntity) => {\n  const is_off = state === \"off\";\n  switch (stateObj?.attributes.device_class) {\n    case \"battery\":\n      return is_off ? \"mdi:battery\" : \"mdi:battery-outline\";\n    case \"battery_charging\":\n      return is_off ? \"mdi:battery\" : \"mdi:battery-charging\";\n    case \"cold\":\n      return is_off ? \"mdi:thermometer\" : \"mdi:snowflake\";\n    case \"connectivity\":\n      return is_off ? \"mdi:server-network-off\" : \"mdi:server-network\";\n    case \"door\":\n      return is_off ? \"mdi:door-closed\" : \"mdi:door-open\";\n    case \"garage_door\":\n      return is_off ? \"mdi:garage\" : \"mdi:garage-open\";\n    case \"power\":\n      return is_off ? \"mdi:power-plug-off\" : \"mdi:power-plug\";\n    case \"gas\":\n    case \"problem\":\n    case \"safety\":\n    case \"tamper\":\n      return is_off ? \"mdi:check-circle\" : \"mdi:alert-circle\";\n    case \"smoke\":\n      return is_off ? \"mdi:check-circle\" : \"mdi:smoke\";\n    case \"heat\":\n      return is_off ? \"mdi:thermometer\" : \"mdi:fire\";\n    case \"light\":\n      return is_off ? \"mdi:brightness-5\" : \"mdi:brightness-7\";\n    case \"lock\":\n      return is_off ? \"mdi:lock\" : \"mdi:lock-open\";\n    case \"moisture\":\n      return is_off ? \"mdi:water-off\" : \"mdi:water\";\n    case \"motion\":\n      return is_off ? \"mdi:walk\" : \"mdi:run\";\n    case \"occupancy\":\n      return is_off ? \"mdi:home-outline\" : \"mdi:home\";\n    case \"opening\":\n      return is_off ? \"mdi:square\" : \"mdi:square-outline\";\n    case \"plug\":\n      return is_off ? \"mdi:power-plug-off\" : \"mdi:power-plug\";\n    case \"presence\":\n      return is_off ? \"mdi:home-outline\" : \"mdi:home\";\n    case \"running\":\n      return is_off ? \"mdi:stop\" : \"mdi:play\";\n    case \"sound\":\n      return is_off ? \"mdi:music-note-off\" : \"mdi:music-note\";\n    case \"update\":\n      return is_off ? \"mdi:package\" : \"mdi:package-up\";\n    case \"vibration\":\n      return is_off ? \"mdi:crop-portrait\" : \"mdi:vibrate\";\n    case \"window\":\n      return is_off ? \"mdi:window-closed\" : \"mdi:window-open\";\n    default:\n      return is_off ? \"mdi:radiobox-blank\" : \"mdi:checkbox-marked-circle\";\n  }\n};\n","/** Return an icon representing a cover state. */\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { domainIcon } from \"./domain_icons\";\n\nexport const coverIcon = (state: HassEntity): string => {\n  const open = state.state !== \"closed\";\n  switch (state.attributes.device_class) {\n    case \"garage\":\n      return open ? \"mdi:garage-open\" : \"mdi:garage\";\n    case \"door\":\n      return open ? \"mdi:door-open\" : \"mdi:door-closed\";\n    case \"shutter\":\n      return open ? \"mdi:window-shutter-open\" : \"mdi:window-shutter\";\n    case \"blind\":\n      return open ? \"mdi:blinds-open\" : \"mdi:blinds\";\n    case \"window\":\n      return open ? \"mdi:window-open\" : \"mdi:window-closed\";\n    default:\n      return domainIcon(\"cover\", state.state);\n  }\n};\n","/** Return an icon representing an input datetime state. */\nimport { domainIcon } from \"./domain_icons\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\n\nexport const inputDateTimeIcon = (state: HassEntity): string => {\n  if (!state.attributes.has_date) {\n    return \"mdi:clock\";\n  }\n  if (!state.attributes.has_time) {\n    return \"mdi:calendar\";\n  }\n  return domainIcon(\"input_datetime\");\n};\n","/**\n * Apply a theme to an element by setting the CSS variables on it.\n *\n * element: Element to apply theme on.\n * themes: HASS Theme information\n * localTheme: selected theme.\n * updateMeta: boolean if we should update the theme-color meta element.\n */\nexport const applyThemesOnElement = (\n  element,\n  themes,\n  localTheme,\n  updateMeta = false\n) => {\n  if (!element._themes) {\n    element._themes = {};\n  }\n  let themeName = themes.default_theme;\n  if (localTheme === \"default\" || (localTheme && themes.themes[localTheme])) {\n    themeName = localTheme;\n  }\n  const styles = { ...element._themes };\n  if (themeName !== \"default\") {\n    const theme = themes.themes[themeName];\n    Object.keys(theme).forEach((key) => {\n      const prefixedKey = \"--\" + key;\n      element._themes[prefixedKey] = \"\";\n      styles[prefixedKey] = theme[key];\n    });\n  }\n  if (element.updateStyles) {\n    element.updateStyles(styles);\n  } else if ((window as any).ShadyCSS) {\n    // implement updateStyles() method of Polemer elements\n    (window as any).ShadyCSS.styleSubtree(/** @type {!HTMLElement} */ (element), styles);\n  }\n\n  if (!updateMeta) {\n    return;\n  }\n\n  const meta = document.querySelector(\"meta[name=theme-color]\");\n  if (meta) {\n    if (!meta.hasAttribute(\"default-content\")) {\n      meta.setAttribute(\"default-content\", meta.getAttribute(\"content\")!);\n    }\n    const themeColor =\n      styles[\"--primary-color\"] || meta.getAttribute(\"default-content\");\n    meta.setAttribute(\"content\", themeColor);\n  }\n}\n","import { LovelaceCard } from \"./types\";\n\nexport const computeCardSize = (card: LovelaceCard): number | Promise<number> => {\n  return typeof card.getCardSize === \"function\" ? card.getCardSize() : 4;\n};","export function computeEntity(entityId: string): string {\n  return entityId.substr(entityId.indexOf(\".\") + 1);\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { formatDateTime } from \"./datetime/format_date_time\";\nimport { formatDate } from \"./datetime/format_date\";\nimport { formatTime } from \"./datetime/format_time\";\nimport { LocalizeFunc } from \"./translations/localize\";\nimport { computeStateDomain } from \"./compute-state-domain\";\nimport { FrontendLocaleData } from \"./types\";\nimport { formatNumber, isNumericState } from \"./format-number\";\n\nexport const computeStateDisplay = (\n  localize: LocalizeFunc,\n  stateObj: HassEntity,\n  locale: FrontendLocaleData,\n  state?: string\n): string => {\n  const compareState = state !== undefined ? state : stateObj.state;\n\n  if (compareState === \"unknown\" || compareState === \"unavailable\") {\n    return localize(`state.default.${compareState}`);\n  }\n\n  // Entities with a `unit_of_measurement` or `state_class` are numeric values and should use `formatNumber`\n  if (isNumericState(stateObj)) {\n    if (stateObj.attributes.device_class === \"monetary\") {\n      try {\n        return formatNumber(compareState, locale, {\n          style: \"currency\",\n          currency: stateObj.attributes.unit_of_measurement,\n        });\n      } catch (_err) {\n        // fallback to default\n      }\n    }\n    return `${formatNumber(compareState, locale)}${\n      stateObj.attributes.unit_of_measurement\n        ? \" \" + stateObj.attributes.unit_of_measurement\n        : \"\"\n    }`;\n  }\n\n  const domain = computeStateDomain(stateObj);\n\n  if (domain === \"input_datetime\") {\n    if (state !== undefined) {\n      // If trying to display an explicit state, need to parse the explict state to `Date` then format.\n      // Attributes aren't available, we have to use `state`.\n      try {\n        const components = state.split(\" \");\n        if (components.length === 2) {\n          // Date and time.\n          return formatDateTime(new Date(components.join(\"T\")), locale);\n        }\n        if (components.length === 1) {\n          if (state.includes(\"-\")) {\n            // Date only.\n            return formatDate(new Date(`${state}T00:00`), locale);\n          }\n          if (state.includes(\":\")) {\n            // Time only.\n            const now = new Date();\n            return formatTime(\n              new Date(`${now.toISOString().split(\"T\")[0]}T${state}`),\n              locale\n            );\n          }\n        }\n        return state;\n      } catch (_e) {\n        // Formatting methods may throw error if date parsing doesn't go well,\n        // just return the state string in that case.\n        return state;\n      }\n    } else {\n      // If not trying to display an explicit state, create `Date` object from `stateObj`'s attributes then format.\n      let date: Date;\n      if (stateObj.attributes.has_date && stateObj.attributes.has_time) {\n        date = new Date(\n          stateObj.attributes.year,\n          stateObj.attributes.month - 1,\n          stateObj.attributes.day,\n          stateObj.attributes.hour,\n          stateObj.attributes.minute\n        );\n        return formatDateTime(date, locale);\n      }\n      if (stateObj.attributes.has_date) {\n        date = new Date(\n          stateObj.attributes.year,\n          stateObj.attributes.month - 1,\n          stateObj.attributes.day\n        );\n        return formatDate(date, locale);\n      }\n      if (stateObj.attributes.has_time) {\n        date = new Date();\n        date.setHours(stateObj.attributes.hour, stateObj.attributes.minute);\n        return formatTime(date, locale);\n      }\n      return stateObj.state;\n    }\n  }\n\n  if (domain === \"humidifier\") {\n    if (compareState === \"on\" && stateObj.attributes.humidity) {\n      return `${stateObj.attributes.humidity} %`;\n    }\n  }\n\n  // `counter` `number` and `input_number` domains do not have a unit of measurement but should still use `formatNumber`\n  if (\n    domain === \"counter\" ||\n    domain === \"number\" ||\n    domain === \"input_number\"\n  ) {\n    return formatNumber(compareState, locale);\n  }\n\n  return (\n    // Return device class translation\n    (stateObj.attributes.device_class &&\n      localize(\n        `component.${domain}.state.${stateObj.attributes.device_class}.${compareState}`\n      )) ||\n    // Return default translation\n    localize(`component.${domain}.state._.${compareState}`) ||\n    // We don't know! Return the raw state.\n    compareState\n  );\n};","/**\r\n * Returns a function, that, as long as it continues to be invoked, will not be triggered. It will be called after it stops being called for `wait` ms.\r\n * This can be usefull for ResizeObservers for example.\r\n * @param func The function you want to debounce\r\n * @param wait Period to wait in ms\r\n * @param immediate Triggering on the leading edge instead of the trailing\r\n * @returns Debounced Function\r\n */\r\n// eslint-disable-next-line: ban-types\r\nexport const debounce = <T extends (...args) => unknown>(\r\n  func: T,\r\n  wait: number,\r\n  immediate = false\r\n): T => {\r\n  let timeout;\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  return function (...args) {\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    const context = this;\r\n    const later = () => {\r\n      timeout = null;\r\n      if (!immediate) {\r\n        func.apply(context, args);\r\n      }\r\n    };\r\n    const callNow = immediate && !timeout;\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n    if (callNow) {\r\n      func.apply(context, args);\r\n    }\r\n  };\r\n};\r\n","export const getLovelace = () => {\n    let root: any = document.querySelector('home-assistant');\n    root = root && root.shadowRoot;\n    root = root && root.querySelector('home-assistant-main');\n    root = root && root.shadowRoot;\n    root = root && root.querySelector('app-drawer-layout partial-panel-resolver');\n    root = root && root.shadowRoot || root;\n    root = root && root.querySelector('ha-panel-lovelace');\n    root = root && root.shadowRoot;\n    root = root && root.querySelector('hui-root');\n    if (root) {\n        const ll = root.lovelace;\n        ll.current_view = root.___curView;\n        return ll;\n    }\n    return null;\n}\n","import { HomeAssistant, ActionConfig } from \"./types\";\nimport { fireEvent } from \"./fire-event\";\nimport { forwardHaptic } from \"./haptic\";\nimport { navigate } from \"./navigate\";\nimport { toggleEntity } from \"./toggle-entity\";\n\nexport const handleClick = (\n  node: HTMLElement,\n  hass: HomeAssistant,\n  config: {\n    entity?: string;\n    camera_image?: string;\n    hold_action?: ActionConfig;\n    tap_action?: ActionConfig;\n    double_tap_action?: ActionConfig;\n  },\n  hold: boolean,\n  dblClick: boolean\n): void => {\n  let actionConfig: ActionConfig | undefined;\n\n  if (dblClick && config.double_tap_action) {\n    actionConfig = config.double_tap_action;\n  } else if (hold && config.hold_action) {\n    actionConfig = config.hold_action;\n  } else if (!hold && config.tap_action) {\n    actionConfig = config.tap_action;\n  }\n\n  if (!actionConfig) {\n    actionConfig = {\n      action: \"more-info\"\n    };\n  }\n\n  if (\n    actionConfig.confirmation &&\n    (!actionConfig.confirmation.exemptions ||\n      !actionConfig.confirmation.exemptions.some(\n        e => e.user === hass!.user!.id\n      ))\n  ) {\n    if (\n      !confirm(\n        actionConfig.confirmation.text ||\n          `Are you sure you want to ${actionConfig.action}?`\n      )\n    ) {\n      return;\n    }\n  }\n\n  switch (actionConfig.action) {\n    case \"more-info\":\n      if (actionConfig.entity || config.entity || config.camera_image) {\n        fireEvent(node, \"hass-more-info\", {\n          entityId: actionConfig.entity\n            ? actionConfig.entity\n            : config.entity\n            ? config.entity\n            : config.camera_image\n        });\n        if (actionConfig.haptic) forwardHaptic(actionConfig.haptic);\n      }\n      break;\n    case \"navigate\":\n      if (actionConfig.navigation_path) {\n        navigate(node, actionConfig.navigation_path);\n        if (actionConfig.haptic) forwardHaptic(actionConfig.haptic);\n      }\n      break;\n    case \"url\":\n      actionConfig.url_path && window.open(actionConfig.url_path);\n      if (actionConfig.haptic) forwardHaptic(actionConfig.haptic);\n      break;\n    case \"toggle\":\n      if (config.entity) {\n        toggleEntity(hass, config.entity!);\n        if (actionConfig.haptic) forwardHaptic(actionConfig.haptic);\n      }\n      break;\n    case \"call-service\": {\n      if (!actionConfig.service) {\n        return;\n      }\n      const [domain, service] = actionConfig.service.split(\".\", 2);\n      const serviceData = { ...actionConfig.service_data };\n      if (serviceData.entity_id === \"entity\") {\n        serviceData.entity_id = config.entity;\n      }\n      hass.callService(domain, service, serviceData, actionConfig.target);\n      if (actionConfig.haptic) forwardHaptic(actionConfig.haptic);\n      break;\n    }\n    case \"fire-dom-event\": {\n      fireEvent(node, \"ll-custom\", actionConfig);\n      if (actionConfig.haptic) forwardHaptic(actionConfig.haptic);\n      break;\n    }\n  }\n};\n","import { ActionConfig } from \"./types\";\n\nexport function hasAction(config?: ActionConfig): boolean {\n  return config !== undefined && config.action !== \"none\";\n}\n","import { PropertyValues } from \"lit\";\n\nimport { HomeAssistant } from \"./types\";\n\n// Check if config or Entity changed\nexport function hasConfigOrEntityChanged(\n  element: any,\n  changedProps: PropertyValues,\n  forceUpdate: Boolean,\n): boolean {\n  if (changedProps.has('config') || forceUpdate) {\n    return true;\n  }\n\n  if (element.config!.entity) {\n    const oldHass = changedProps.get('hass') as HomeAssistant | undefined;\n    if (oldHass) {\n      return (\n        oldHass.states[element.config!.entity]\n        !== element.hass!.states[element.config!.entity]\n      );\n    }\n    return true;\n  } else {\n    return false;\n  }\n}","import { ActionConfig } from \"./types\";\n\n// Check if config or Entity changed\nexport function hasDoubleClick(config?: ActionConfig): boolean {\n  return config !== undefined && config.action !== \"none\";\n}","//REF: https://github.com/home-assistant/frontend/blob/dev/src/common/datetime/relative_time.ts\n\nimport { selectUnit } from \"@formatjs/intl-utils\";\nimport { FrontendLocaleData } from \"../types\";\n\n const formatRelTimeMem =\n  (locale: FrontendLocaleData) =>\n    new Intl.RelativeTimeFormat(locale.language, { numeric: \"auto\" });\n\n/**\n * Calculate a string representing a date object as relative time from now.\n *\n * Example output: 5 minutes ago, in 3 days.\n */\n export const relativeTime = (\n  from: Date,\n  locale: FrontendLocaleData,\n  to?: Date,\n  includeTense = true\n): string => {\n  const diff = selectUnit(from, to);\n  if (includeTense) {\n    return formatRelTimeMem(locale).format(diff.value, diff.unit);\n  }\n  return Intl.NumberFormat(locale.language, {\n    style: \"unit\",\n    unit: diff.unit,\n    unitDisplay: \"long\",\n  }).format(Math.abs(diff.value));\n};\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport durationToSeconds from \"../datetime/duration_to_seconds\";\n\nexport function timerTimeRemaining(stateObj: HassEntity) {\n  let timeRemaining = durationToSeconds(stateObj.attributes.remaining);\n\n  if (stateObj.state === \"active\") {\n    const now = new Date().getTime();\n    const madeActive = new Date(stateObj.last_changed).getTime();\n    timeRemaining = Math.max(timeRemaining - (now - madeActive) / 1000, 0);\n  }\n\n  return timeRemaining;\n}\n","/**\n * Convert a Duration hh:mm:ss format to seconds\n * @param duration hh:mm:ss formated duration\n * @returns duration in seconds\n */\n export default function durationToSeconds(duration: string): number {\n  const parts = duration.split(\":\").map(Number);\n  return parts[0] * 3600 + parts[1] * 60 + parts[2];\n}\n","import { HomeAssistant } from \"./types\";\nimport { STATES_OFF } from \"./const\";\nimport { computeDomain } from \"./compute-domain\";\n\nexport const turnOnOffEntities = (\n  hass: HomeAssistant,\n  entityIds: string[],\n  turnOn = true\n): void => {\n  const domainsToCall = {};\n  entityIds.forEach((entityId) => {\n    if (STATES_OFF.includes(hass.states[entityId].state) === turnOn) {\n      const stateDomain = computeDomain(entityId);\n      const serviceDomain = [\"cover\", \"lock\"].includes(stateDomain)\n        ? stateDomain\n        : \"homeassistant\";\n\n      if (!(serviceDomain in domainsToCall)) {\n        domainsToCall[serviceDomain] = [];\n      }\n      domainsToCall[serviceDomain].push(entityId);\n    }\n  });\n\n  Object.keys(domainsToCall).forEach((domain) => {\n    let service;\n    switch (domain) {\n      case \"lock\":\n        service = turnOn ? \"unlock\" : \"lock\";\n        break;\n      case \"cover\":\n        service = turnOn ? \"open_cover\" : \"close_cover\";\n        break;\n      default:\n        service = turnOn ? \"turn_on\" : \"turn_off\";\n    }\n\n    const entities = domainsToCall[domain];\n    hass.callService(domain, service, { entity_id: entities });\n  });\n};\n"],"names":["NumberFormat","TimeFormat","formatDate","dateObj","locale","formatDateMem","format","Intl","DateTimeFormat","language","year","month","day","useAmPm","time_format","system","testLanguage","undefined","test","Date","toLocaleString","includes","am_pm","formatDateTime","formatDateTimeMem","hour","minute","hour12","formatTime","formatTimeMem","computeDomain","entityId","substr","indexOf","computeRTL","hass","lang","translationMetadata","translations","isRTL","computeStateDomain","stateObj","entity_id","isNumericState","attributes","unit_of_measurement","state_class","numberFormatToLocale","localeOptions","number_format","comma_decimal","decimal_comma","space_comma","round","value","precision","Math","formatNumber","num","options","Number","isNaN","input","none","getDefaultFormatOptions","err","console","error","maximumFractionDigits","toString","style","currency","defaultOptions","minimumFractionDigits","digits","split","length","STATES_OFF","DOMAINS_TOGGLE","Set","fireEvent","node","type","detail","event","Event","bubbles","cancelable","Boolean","composed","dispatchEvent","SPECIAL_TYPES","DOMAIN_TO_ELEMENT_TYPE","alert","automation","climate","cover","fan","group","input_boolean","input_number","input_select","input_text","light","lock","media_player","remote","scene","script","sensor","timer","switch","vacuum","water_heater","input_datetime","fixedIcons","calendar","camera","configurator","conversation","device_tracker","history_graph","homeassistant","homekit","image_processing","mailbox","notify","person","plant","proximity","simple_alarm","sun","updater","weblink","domainIcon","domain","state","warn","evaluateFilter","forwardHaptic","hapticType","window","navigate","_node","path","replace","history","replaceState","pushState","turnOnOffEntity","turnOn","service","stateDomain","serviceDomain","callService","toggleEntity","states","handleActionConfig","config","actionConfig","action","confirmation","exemptions","some","e","user","id","confirm","text","entity","camera_image","navigation_path","url_path","open","service_data","target","fixedDeviceClassIcons","humidity","illuminance","temperature","pressure","power","signal_strength","domainIcons","binary_sensor","is_off","device_class","dclass","battery","batteryRound","unit","has_date","has_time","element","themes","localTheme","updateMeta","_themes","themeName","default_theme","styles","theme","Object","keys","forEach","key","prefixedKey","updateStyles","ShadyCSS","styleSubtree","meta","document","querySelector","hasAttribute","setAttribute","getAttribute","themeColor","card","getCardSize","localize","compareState","_err","date","setHours","components","join","now","toISOString","_e","cardConfig","isRow","_createError","_createThing","tag","createElement","setConfig","message","startsWith","has","customElements","get","display","setTimeout","whenDefined","then","clearTimeout","func","wait","immediate","timeout","args","context","this","later","apply","callNow","filter","attribute","operator","match","formatDateMonthMem","formatDateMonthYearMem","formatDateNumericMem","formatDateShortMem","formatDateTimeNumericMem","second","formatDateTimeWithSecondsMem","weekday","formatDateWeekdayMem","formatDateYearMem","formatTimeWeekdayMem","formatTimeWithSecondsMem","root","shadowRoot","ll","lovelace","current_view","___curView","double_tap_action","hold_action","tap_action","hold","dblClick","haptic","serviceData","changedProps","forceUpdate","oldHass","from","to","includeTense","diff","selectUnit","RelativeTimeFormat","numeric","formatRelTimeMem","unitDisplay","abs","icon","parts","timeRemaining","remaining","map","getTime","madeActive","last_changed","max","entityIds","domainsToCall","push"],"mappings":"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"}